// Code generated by "stringer -output=protocol_string.go -type=AlgorithmID,CommandID,TypeID"; DO NOT EDIT.

package yubihsm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AlgorithmRSAPKCS1SHA1-1]
	_ = x[AlgorithmRSAPKCS1SHA256-2]
	_ = x[AlgorithmRSAPKCS1SHA384-3]
	_ = x[AlgorithmRSAPKCS1SHA512-4]
	_ = x[AlgorithmRSAPSSSHA1-5]
	_ = x[AlgorithmRSAPSSSHA256-6]
	_ = x[AlgorithmRSAPSSSHA384-7]
	_ = x[AlgorithmRSAPSSSHA512-8]
	_ = x[AlgorithmRSA2048-9]
	_ = x[AlgorithmRSA3072-10]
	_ = x[AlgorithmRSA4096-11]
	_ = x[AlgorithmECP256-12]
	_ = x[AlgorithmECP384-13]
	_ = x[AlgorithmECP521-14]
	_ = x[AlgorithmECK256-15]
	_ = x[AlgorithmECBP256-16]
	_ = x[AlgorithmECBP384-17]
	_ = x[AlgorithmECBP512-18]
	_ = x[AlgorithmHMACSHA1-19]
	_ = x[AlgorithmHMACSHA256-20]
	_ = x[AlgorithmHMACSHA384-21]
	_ = x[AlgorithmHMACSHA512-22]
	_ = x[AlgorithmECDSASHA1-23]
	_ = x[AlgorithmECECDH-24]
	_ = x[AlgorithmRSAOAEPSHA1-25]
	_ = x[AlgorithmRSAOAEPSHA256-26]
	_ = x[AlgorithmRSAOAEPSHA384-27]
	_ = x[AlgorithmRSAOAEPSHA512-28]
	_ = x[AlgorithmAES128CCMWRAP-29]
	_ = x[AlgorithmOpaqueData-30]
	_ = x[AlgorithmOpaqueX509Certificate-31]
	_ = x[AlgorithmMGF1SHA1-32]
	_ = x[AlgorithmMGF1SHA256-33]
	_ = x[AlgorithmMGF1SHA384-34]
	_ = x[AlgorithmMGF1SHA512-35]
	_ = x[AlgorithmSSHTemplate-36]
	_ = x[AlgorithmYubicoOTPAES128-37]
	_ = x[AlgorithmYubicoAESAuthentication-38]
	_ = x[AlgorithmYubicoOTPAES192-39]
	_ = x[AlgorithmYubicoOTPAES256-40]
	_ = x[AlgorithmAES192CCMWRAP-41]
	_ = x[AlgorithmAES256CCMWRAP-42]
	_ = x[AlgorithmECDSASHA256-43]
	_ = x[AlgorithmECDSASHA384-44]
	_ = x[AlgorithmECDSASHA512-45]
	_ = x[AlgorithmED25519-46]
	_ = x[AlgorithmECP224-47]
	_ = x[AlgorithmRSAPKCSv15Decrypt-48]
	_ = x[AlgorithmYubicoECP256Authentication-49]
	_ = x[AlgorithmAES128-50]
	_ = x[AlgorithmAES192-51]
	_ = x[AlgorithmAES256-52]
	_ = x[AlgorithmAESECB-53]
	_ = x[AlgorithmAESCBC-54]
}

const _AlgorithmID_name = "AlgorithmRSAPKCS1SHA1AlgorithmRSAPKCS1SHA256AlgorithmRSAPKCS1SHA384AlgorithmRSAPKCS1SHA512AlgorithmRSAPSSSHA1AlgorithmRSAPSSSHA256AlgorithmRSAPSSSHA384AlgorithmRSAPSSSHA512AlgorithmRSA2048AlgorithmRSA3072AlgorithmRSA4096AlgorithmECP256AlgorithmECP384AlgorithmECP521AlgorithmECK256AlgorithmECBP256AlgorithmECBP384AlgorithmECBP512AlgorithmHMACSHA1AlgorithmHMACSHA256AlgorithmHMACSHA384AlgorithmHMACSHA512AlgorithmECDSASHA1AlgorithmECECDHAlgorithmRSAOAEPSHA1AlgorithmRSAOAEPSHA256AlgorithmRSAOAEPSHA384AlgorithmRSAOAEPSHA512AlgorithmAES128CCMWRAPAlgorithmOpaqueDataAlgorithmOpaqueX509CertificateAlgorithmMGF1SHA1AlgorithmMGF1SHA256AlgorithmMGF1SHA384AlgorithmMGF1SHA512AlgorithmSSHTemplateAlgorithmYubicoOTPAES128AlgorithmYubicoAESAuthenticationAlgorithmYubicoOTPAES192AlgorithmYubicoOTPAES256AlgorithmAES192CCMWRAPAlgorithmAES256CCMWRAPAlgorithmECDSASHA256AlgorithmECDSASHA384AlgorithmECDSASHA512AlgorithmED25519AlgorithmECP224AlgorithmRSAPKCSv15DecryptAlgorithmYubicoECP256AuthenticationAlgorithmAES128AlgorithmAES192AlgorithmAES256AlgorithmAESECBAlgorithmAESCBC"

var _AlgorithmID_index = [...]uint16{0, 21, 44, 67, 90, 109, 130, 151, 172, 188, 204, 220, 235, 250, 265, 280, 296, 312, 328, 345, 364, 383, 402, 420, 435, 455, 477, 499, 521, 543, 562, 592, 609, 628, 647, 666, 686, 710, 742, 766, 790, 812, 834, 854, 874, 894, 910, 925, 951, 986, 1001, 1016, 1031, 1046, 1061}

func (i AlgorithmID) String() string {
	i -= 1
	if i >= AlgorithmID(len(_AlgorithmID_index)-1) {
		return "AlgorithmID(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _AlgorithmID_name[_AlgorithmID_index[i]:_AlgorithmID_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CommandResponse-128]
	_ = x[CommandEcho-1]
	_ = x[ResponseEcho-129]
	_ = x[CommandCreateSession-3]
	_ = x[ResponseCreateSession-131]
	_ = x[CommandAuthenticateSession-4]
	_ = x[ResponseAuthenticateSession-132]
	_ = x[CommandSessionMessage-5]
	_ = x[ResponseSessionMessage-133]
	_ = x[CommandGetDeviceInfo-6]
	_ = x[ResponseGetDeviceInfo-134]
	_ = x[CommandResetDevice-8]
	_ = x[ResponseResetDevice-136]
	_ = x[CommandGetDevicePublicKey-10]
	_ = x[ResponseGetDevicePublicKey-138]
}

const (
	_CommandID_name_0 = "CommandEcho"
	_CommandID_name_1 = "CommandCreateSessionCommandAuthenticateSessionCommandSessionMessageCommandGetDeviceInfo"
	_CommandID_name_2 = "CommandResetDevice"
	_CommandID_name_3 = "CommandGetDevicePublicKey"
	_CommandID_name_4 = "CommandResponseResponseEcho"
	_CommandID_name_5 = "ResponseCreateSessionResponseAuthenticateSessionResponseSessionMessageResponseGetDeviceInfo"
	_CommandID_name_6 = "ResponseResetDevice"
	_CommandID_name_7 = "ResponseGetDevicePublicKey"
)

var (
	_CommandID_index_1 = [...]uint8{0, 20, 46, 67, 87}
	_CommandID_index_4 = [...]uint8{0, 15, 27}
	_CommandID_index_5 = [...]uint8{0, 21, 48, 70, 91}
)

func (i CommandID) String() string {
	switch {
	case i == 1:
		return _CommandID_name_0
	case 3 <= i && i <= 6:
		i -= 3
		return _CommandID_name_1[_CommandID_index_1[i]:_CommandID_index_1[i+1]]
	case i == 8:
		return _CommandID_name_2
	case i == 10:
		return _CommandID_name_3
	case 128 <= i && i <= 129:
		i -= 128
		return _CommandID_name_4[_CommandID_index_4[i]:_CommandID_index_4[i+1]]
	case 131 <= i && i <= 134:
		i -= 131
		return _CommandID_name_5[_CommandID_index_5[i]:_CommandID_index_5[i+1]]
	case i == 136:
		return _CommandID_name_6
	case i == 138:
		return _CommandID_name_7
	default:
		return "CommandID(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TypeOpaque-1]
	_ = x[TypeAuthenticationKey-2]
	_ = x[TypeAsymmetricKey-3]
	_ = x[TypeWrapKey-4]
	_ = x[TypeHmacKey-5]
	_ = x[TypeTemplate-6]
	_ = x[TypeOtpAeadKey-7]
	_ = x[TypeSymmetricKey-8]
}

const _TypeID_name = "TypeOpaqueTypeAuthenticationKeyTypeAsymmetricKeyTypeWrapKeyTypeHmacKeyTypeTemplateTypeOtpAeadKeyTypeSymmetricKey"

var _TypeID_index = [...]uint8{0, 10, 31, 48, 59, 70, 82, 96, 112}

func (i TypeID) String() string {
	i -= 1
	if i >= TypeID(len(_TypeID_index)-1) {
		return "TypeID(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _TypeID_name[_TypeID_index[i]:_TypeID_index[i+1]]
}
