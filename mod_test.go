package yubihsm

import (
	"crypto/sha256"
	"errors"
	"flag"
	"fmt"
	"os"
	"testing"

	"golang.org/x/crypto/pbkdf2"
)

// Set to [true] when running tests to derive and save the default
// authentication key. Since this uses PBKDF2, which is generally
// considered not the preferred key derivation function, the key
// derivation is only used for the default password "password"; in
// all other cases random 32-byte keys are encouraged.
var flagGenerateDefaultKey bool

func init() {
	flag.BoolVar(&flagGenerateDefaultKey, "generate-default-key", false, "")
}

func generateDefaultKey() []byte {
	return pbkdf2.Key([]byte("password"), []byte("Yubico"), 10_000, 32, sha256.New)
}

func TestGenerateDefaultKey(t *testing.T) {
	t.Parallel()
	defaultAuthKey := generateDefaultKey()
	t.Logf("default key = %x", defaultAuthKey)

	if flagGenerateDefaultKey {
		out, err := os.Create("default-auth-key.go")
		if err != nil {
			t.Fatal(err)
		}

		t.Cleanup(func() {
			err = out.Close()
			if err != nil {
				t.Error(err)
			}
		})

		_, err = fmt.Fprintf(out, `// Code generated by go test github.com/nholstein/yubihsm -generate-default-key; DO NOT EDIT.

package yubihsm

// defaultAuthKey is the pre-derived default YubiHSM2 authentication key.
const defaultAuthKey = %q

func defaultEncryptionKey() (key SessionKey) {
	copy(key[:], defaultAuthKey[:len(key)])
	return
}

func defaultMACKey() (key SessionKey) {
	copy(key[:], defaultAuthKey[len(key):])
	return
}
`, defaultAuthKey)
		if err != nil {
			t.Error(err)
		}
	}
}

func TestCheckErr(t *testing.T) {
	slice, err := checkErr([]byte{1, 2}, errors.New("error"))
	if err == nil || slice != nil {
		t.Errorf("should return (nil, error)")
	}

	str, err := checkErr("foo", errors.New("error"))
	if err == nil || str != "" {
		t.Errorf("should return (\"\", error)")
	}
}
